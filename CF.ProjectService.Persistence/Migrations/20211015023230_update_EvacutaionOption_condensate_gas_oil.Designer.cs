// <auto-generated />
using System;
using CF.ProjectService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CF.ProjectService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211015023230_update_EvacutaionOption_condensate_gas_oil")]
    partial class update_EvacutaionOption_condensate_gas_oil
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("prj")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CF.ProjectService.Application.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserPrincipal")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("AppUsers", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "admin",
                            Email = "admin",
                            IsDeleted = false,
                            Name = "ConceptorAdmin",
                            Role = 1,
                            UserPrincipal = "admin"
                        });
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.CoeInputP10", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CondensateRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CondensateRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DrillingCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("GasFTHPMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHPMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHTMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHTMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateAGMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateAGMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateNAGMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateNAGMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OilFTHPMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHPMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHTMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHTMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateGasMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateGasMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateOilMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateOilMin")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("DrillingCenterId")
                        .IsUnique();

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CoeInputP10", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.CoeInputP50", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CondensateRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CondensateRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DrillingCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("GasFTHPMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHPMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHTMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHTMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateAGMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateAGMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateNAGMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateNAGMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OilFTHPMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHPMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHTMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHTMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateGasMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateGasMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateOilMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateOilMin")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("DrillingCenterId")
                        .IsUnique();

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CoeInputP50", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.CoeInputP90", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CondensateRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CondensateRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DrillingCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("GasFTHPMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHPMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHTMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasFTHTMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasInjectionRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasLiftRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateAGMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateAGMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateNAGMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GasRateNAGMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OilFTHPMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHPMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHTMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilFTHTMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OilRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionPressureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionPressureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionRateMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterInjectionRateMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateGasMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateGasMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateOilMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterRateOilMin")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("DrillingCenterId")
                        .IsUnique();

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CoeInputP90", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Countries", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.DeterministicValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuideLines")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubSection")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("DeterministicValues", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.DrillingCenterData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArtificialLiftType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtificialLiftTypeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CGR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CGRUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CITHP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CITHPUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DistanceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GORUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HydroCarbonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HydroCarbonTypeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LGR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGRUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxGas_CarbonDioxide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxGas_CarbonDioxideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxGas_HydrogenSulphide")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxGas_HydrogenSulphideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxGas_Mercaptan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxGas_MercaptanUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxGas_Mercury")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxGas_MercuryUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxGas_Sand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxGas_SandUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxOil_ApiGravity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxOil_ApiGravityUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxOil_CarbonDioxide")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxOil_CarbonDioxideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxOil_HydrogenSulphide")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxOil_HydrogenSulphideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxOil_Mercaptan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxOil_MercaptanUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxOil_Mercury")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxOil_MercuryUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxOil_Salt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxOil_SaltUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxOil_Sand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxOil_SandUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxOil_WAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaxOil_WATUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinGas_CarbonDioxide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinGas_CarbonDioxideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinGas_HydrogenSulphide")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinGas_HydrogenSulphideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinGas_Mercaptan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinGas_MercaptanUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinGas_Mercury")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinGas_MercuryUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinGas_Sand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinGas_SandUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinOil_ApiGravity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinOil_ApiGravityUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinOil_CarbonDioxide")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinOil_CarbonDioxideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinOil_HydrogenSulphide")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinOil_HydrogenSulphideUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinOil_Mercaptan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinOil_MercaptanUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinOil_Mercury")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinOil_MercuryUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinOil_Salt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinOil_SaltUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinOil_Sand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinOil_SandUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinOil_WAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinOil_WATUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("P10_GasInjectorWell")
                        .HasColumnType("int");

                    b.Property<int>("P10_GasLiftWell")
                        .HasColumnType("int");

                    b.Property<int>("P10_GasProducerWell")
                        .HasColumnType("int");

                    b.Property<int>("P10_OilProducerWell")
                        .HasColumnType("int");

                    b.Property<int>("P10_PumpedWell")
                        .HasColumnType("int");

                    b.Property<int>("P10_WaterInjectorWell")
                        .HasColumnType("int");

                    b.Property<int>("P50_GasInjectorWell")
                        .HasColumnType("int");

                    b.Property<int>("P50_GasLiftWell")
                        .HasColumnType("int");

                    b.Property<int>("P50_GasProducerWell")
                        .HasColumnType("int");

                    b.Property<int>("P50_OilProducerWell")
                        .HasColumnType("int");

                    b.Property<int>("P50_PumpedWell")
                        .HasColumnType("int");

                    b.Property<int>("P50_WaterInjectorWell")
                        .HasColumnType("int");

                    b.Property<int>("P90_GasInjectorWell")
                        .HasColumnType("int");

                    b.Property<int>("P90_GasLiftWell")
                        .HasColumnType("int");

                    b.Property<int>("P90_GasProducerWell")
                        .HasColumnType("int");

                    b.Property<int>("P90_OilProducerWell")
                        .HasColumnType("int");

                    b.Property<int>("P90_PumpedWell")
                        .HasColumnType("int");

                    b.Property<int>("P90_WaterInjectorWell")
                        .HasColumnType("int");

                    b.Property<decimal>("PowerRequirementPerWell")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PowerRequirementPerWellUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectRevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TieInLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TieInLocationUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WaterDepth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaterDepthUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WellTestRequirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WellTestRequirementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectRevisionId");

                    b.ToTable("DrillingCenters", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Enviromental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmbientTemperatureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AmbientTemperatureMaxUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AmbientTemperatureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AmbientTemperatureMinUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinateLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinateLon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectRevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("SeabedTemperatureMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeabedTemperatureMaxUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SeabedTemperatureMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeabedTemperatureMinUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectRevisionId")
                        .IsUnique();

                    b.ToTable("Enviromentals", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InfrastructureDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxCo2")
                        .HasColumnType("int");

                    b.Property<int?>("MaxH2S")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Salt")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VapourPressure")
                        .HasColumnType("int");

                    b.Property<int?>("WaterContent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("InfrastructureDataId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EvacuationOption", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionCondensate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BSW")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistanceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DistanceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EvacuationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("H2S")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InfrastructureDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBaseConcept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameFacilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressuresOperatingUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PressuresOperatingValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PressuresRatedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PressuresRatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Salt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VapourPressure")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("InfrastructureDataId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EvacuationOptionCondensate", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionGas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Co2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistanceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DistanceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EvacuationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("H2S")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HydrocarbonDewpoints")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InfrastructureDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBaseConcept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Mercury")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameFacilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressuresOperatingUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PressuresOperatingValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PressuresRatedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PressuresRatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RSH")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterContent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WaterDewpoints")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("InfrastructureDataId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EvacuationOptionGas", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionOil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BSW")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistanceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DistanceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EvacuationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("H2S")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InfrastructureDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBaseConcept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameFacilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressuresOperatingUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PressuresOperatingValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PressuresRatedUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PressuresRatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Salt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VapourPressure")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("InfrastructureDataId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EvacuationOptionOil", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionProducedWater", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistanceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DistanceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EvacuationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InfrastructureDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBaseConcept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OilInWater")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("InfrastructureDataId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EvacuationOptionProducedWater", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.FieldsData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AbandonmentPressure")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AbandonmentPressureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailabilityNAG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailabilityNearbyField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailabilityWater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AvailableAmountOfGas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AvailableAmountOfGasUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GasDisposalByReinjection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HydrocacbornType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HydrocacbornTypeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NumberOfDriliingCenter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatingPressure")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OperatingPressureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductStartYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductionLife")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductionLifeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectRevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WaterDisposalLocation")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectRevisionId")
                        .IsUnique();

                    b.ToTable("FieldsDatas", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.InfrastructureData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectRevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectRevisionId")
                        .IsUnique();

                    b.ToTable("InfrastructureDatas", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraAccuracyExpression", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Curve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstimateClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("LookUpCraAccuracyExpression", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraContingencyExpression", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Curve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstimateClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("LookUpCraContingencyExpression", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraPdfXValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositiveAccurary")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("LookUpCraPdfXValue", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraPdfYValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositiveAccurary")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("LookUpCraPdfYValue", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraSCurveValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Percent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositiveAccurary")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("LookUpCraSCurveValue", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Asset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Business")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastRevisionNo")
                        .HasColumnType("int");

                    b.Property<int?>("LastRevisionStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastSubmittedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastSubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LatestDeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("LastSubmittedBy");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Projects", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectDeterministicValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeterministicValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectRevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("DeterministicValueId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectRevisionId");

                    b.ToTable("ProjectDeterministicValues", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectNature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ProjectNatures", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa5bb7f8-868b-4c91-a7b9-c6d343c30450"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Nature = "Greenfield"
                        },
                        new
                        {
                            Id = new Guid("fb5ab810-17fa-4511-be99-5b7bcfdf4d03"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Nature = "Infill"
                        },
                        new
                        {
                            Id = new Guid("e523a4d3-4c16-4310-8060-21b54bcdd173"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Nature = "Brownfield"
                        });
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectNatureDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectNatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectNatureId");

                    b.ToTable("ProjectNatureDetails", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpecedFirstResponseBy")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RespondedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RespondedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RespondedRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RevisionNo")
                        .HasColumnType("int");

                    b.Property<int>("RevisionStatus")
                        .HasColumnType("int");

                    b.Property<string>("ServiecRequestNUmber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubmittedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TargetUnitTechnicalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UtcCountry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStageId");

                    b.HasIndex("RespondedByUserId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("ProjectRevisions", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ProjectStages", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eaa4148f-034c-486c-b8be-c93bacf7307f"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Stage = "Pre-FEL"
                        },
                        new
                        {
                            Id = new Guid("270a7711-e19e-4a13-9f77-352d14e57850"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Stage = "FEL1"
                        },
                        new
                        {
                            Id = new Guid("dc46e5db-82bf-4064-897b-17fc4099b8cb"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Stage = "FEL2"
                        },
                        new
                        {
                            Id = new Guid("99e346e9-13fb-488b-a5ad-7569e443e03e"),
                            CreatedByUserId = new Guid("eaa6081c-16f1-41be-9153-5662bc03e9fc"),
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Stage = "FEL3"
                        });
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.RevisionTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProjectRevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectRevisionId");

                    b.HasIndex("RevisionId");

                    b.HasIndex("UserId");

                    b.ToTable("RevisionTeamMember", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.UTCCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Utc")
                        .HasColumnType("int");

                    b.Property<string>("WaterDepthGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WaterDepthMax")
                        .HasColumnType("int");

                    b.Property<int?>("WaterDepthMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("UTCCosts", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.UpstreamMetricColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CFColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SPColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SPSubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("UpstreamMetricColumn", "prj");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.AppUser", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.CoeInputP10", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.DrillingCenterData", "DrillingCenter")
                        .WithOne("CoeInputP10")
                        .HasForeignKey("CF.ProjectService.Application.Entities.CoeInputP10", "DrillingCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("DrillingCenter");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.CoeInputP50", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.DrillingCenterData", "DrillingCenter")
                        .WithOne("CoeInputP50")
                        .HasForeignKey("CF.ProjectService.Application.Entities.CoeInputP50", "DrillingCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("DrillingCenter");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.CoeInputP90", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.DrillingCenterData", "DrillingCenter")
                        .WithOne("CoeInputP90")
                        .HasForeignKey("CF.ProjectService.Application.Entities.CoeInputP90", "DrillingCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("DrillingCenter");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Country", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.DeterministicValue", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.DrillingCenterData", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectRevision", "ProjectRevision")
                        .WithMany("DrillingCenter")
                        .HasForeignKey("ProjectRevisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProjectRevision");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Enviromental", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectRevision", "ProjectRevision")
                        .WithOne("Enviromental")
                        .HasForeignKey("CF.ProjectService.Application.Entities.Enviromental", "ProjectRevisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProjectRevision");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOption", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.InfrastructureData", "InfrastructureData")
                        .WithMany("EvacuationOptions")
                        .HasForeignKey("InfrastructureDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("InfrastructureData");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionCondensate", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.InfrastructureData", "InfrastructureData")
                        .WithMany("EvacuationOptionCondensates")
                        .HasForeignKey("InfrastructureDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("InfrastructureData");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionGas", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.InfrastructureData", "InfrastructureData")
                        .WithMany("EvacuationOptionGas")
                        .HasForeignKey("InfrastructureDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("InfrastructureData");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionOil", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.InfrastructureData", "InfrastructureData")
                        .WithMany("EvacuationOptionOils")
                        .HasForeignKey("InfrastructureDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("InfrastructureData");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.EvacuationOptionProducedWater", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.InfrastructureData", "InfrastructureData")
                        .WithMany("EvacuationOptionProducedWaters")
                        .HasForeignKey("InfrastructureDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("InfrastructureData");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.FieldsData", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectRevision", "ProjectRevision")
                        .WithOne("FieldsData")
                        .HasForeignKey("CF.ProjectService.Application.Entities.FieldsData", "ProjectRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProjectRevision");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.InfrastructureData", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectRevision", "ProjectRevision")
                        .WithOne("InfrastructureData")
                        .HasForeignKey("CF.ProjectService.Application.Entities.InfrastructureData", "ProjectRevisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProjectRevision");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraAccuracyExpression", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraContingencyExpression", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraPdfXValue", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraPdfYValue", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.LookUpCraSCurveValue", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Project", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "LastSubmittedByUser")
                        .WithMany()
                        .HasForeignKey("LastSubmittedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastSubmittedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectDeterministicValue", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.DeterministicValue", "DeterministicValue")
                        .WithMany()
                        .HasForeignKey("DeterministicValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectRevision", "ProjectRevision")
                        .WithMany()
                        .HasForeignKey("ProjectRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("DeterministicValue");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProjectRevision");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectNature", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectNatureDetail", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.Project", "Project")
                        .WithMany("ProjectNatureDetails")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectNature", "ProjectNature")
                        .WithMany()
                        .HasForeignKey("ProjectNatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("ProjectNature");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectRevision", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.Project", "Project")
                        .WithMany("ProjectRevisions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectStage", "ProjectStage")
                        .WithMany()
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "RespondedByUser")
                        .WithMany()
                        .HasForeignKey("RespondedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("ProjectStage");

                    b.Navigation("RespondedByUser");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectStage", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectUser", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.RevisionTeamMember", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectRevision", null)
                        .WithMany("RevisionTeamMembers")
                        .HasForeignKey("ProjectRevisionId");

                    b.HasOne("CF.ProjectService.Application.Entities.ProjectRevision", "Revision")
                        .WithMany()
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Revision");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.UTCCost", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.Country", "Country")
                        .WithMany("UTCCosts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("Country");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.UpstreamMetricColumn", b =>
                {
                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CF.ProjectService.Application.Entities.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Country", b =>
                {
                    b.Navigation("UTCCosts");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.DrillingCenterData", b =>
                {
                    b.Navigation("CoeInputP10");

                    b.Navigation("CoeInputP50");

                    b.Navigation("CoeInputP90");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.InfrastructureData", b =>
                {
                    b.Navigation("EvacuationOptionCondensates");

                    b.Navigation("EvacuationOptionGas");

                    b.Navigation("EvacuationOptionOils");

                    b.Navigation("EvacuationOptionProducedWaters");

                    b.Navigation("EvacuationOptions");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.Project", b =>
                {
                    b.Navigation("ProjectNatureDetails");

                    b.Navigation("ProjectRevisions");

                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("CF.ProjectService.Application.Entities.ProjectRevision", b =>
                {
                    b.Navigation("DrillingCenter");

                    b.Navigation("Enviromental");

                    b.Navigation("FieldsData");

                    b.Navigation("InfrastructureData");

                    b.Navigation("RevisionTeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
